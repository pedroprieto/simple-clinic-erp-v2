AWSTemplateFormatVersion: 2010-09-09
Description: >-
  simple-clinic-erp-v2
Transform:
  - AWS::Serverless-2016-10-31
Parameters:
  Stage:
    Type: String
    Default: Prod

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  ClinicERPPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false

  ClinicERPPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref ClinicERPPool
      GenerateSecret: false
      ClientName: ClinicERP

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      BinaryMediaTypes: ["*/*"]
      # Auth:
      #   Authorizers:
      #     ClinicERPAuthorizer:
      #       UserPoolArn: !GetAtt ClinicERPPool.Arn
      # Models:
      #   DoctorModel:
      #     "Fn::Transform":
      #       Name: "AWS::Include"
      #       Parameters:
      #         Location: "./src/schemas/doctorSchema.json"

  lambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      CodeUri: ./
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - S3CrudPolicy:
            BucketName: !Ref MyBucket
      Environment:
        Variables:
          tableName: !Ref SampleTable
          bucketName: !Ref MyBucket
          stage: !Ref Stage
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /{proxy+}
            Method: ANY
            # RequestModel:
            #   Model: DoctorModel
            #   Required: true
            #   ValidateBody: true

  MyBucket:
    Type: AWS::S3::Bucket

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1-SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      GlobalSecondaryIndexes:
        - IndexName: "GSI3"
          KeySchema:
            - AttributeName: "SK"
              KeyType: "HASH"
            - AttributeName: "GSI1-SK"
              KeyType: "RANGE"
          ProvisionedThroughput:
            ReadCapacityUnits: "2"
            WriteCapacityUnits: "2"
          Projection:
            ProjectionType: ALL

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
