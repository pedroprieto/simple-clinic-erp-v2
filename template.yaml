AWSTemplateFormatVersion: 2010-09-09
Description: >-
  simple-clinic-erp-v2
Transform:
  - AWS::Serverless-2016-10-31
Parameters:
  Stage:
    Type: String
    AllowedValues:
      - staging
      - production
  CognitoDomain:
    Type: String
    Default: simpleclinicerp
  ApiName:
    Type: String
    Default: simpleclinicerpv2

# Conditions:
#   IsProduction: !Equals [!Ref Stage, production]

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  ClinicERPPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Stage}-simple-clinic-erp-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false

  ClinicERPPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref ClinicERPPool
      GenerateSecret: false
      ClientName: ClinicERP
      CallbackURLs:
        # - !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/login"
        - "https://example.com/api/login"
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      SupportedIdentityProviders:
        - COGNITO

  ClinicERPPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${CognitoDomain}-${Stage}-${AWS::AccountId}"
      UserPoolId: !Ref ClinicERPPool

  # ValidateFunctionAuthorizer:
  #   Type: "AWS::ApiGateway::Authorizer"
  #   Properties:
  #     AuthorizerUri: !Join
  #       - ""
  #       - - "arn:aws:apigateway:"
  #         - !Ref "AWS::Region"
  #         - ":lambda:path/2015-03-31/functions/"
  #         - !GetAtt
  #           - validationFunction
  #           - Arn
  #         - /invocations
  #     Type: REQUEST
  #     IdentitySource: method.request.header.Auth
  #     Name: DefaultAuthorizer
  #     RestApiId: !Ref MyApi

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ApiName}-${Stage}"
      StageName: !Ref Stage
      Variables:
        LAMBDA_ALIAS: !Ref Stage
      BinaryMediaTypes: ["*/*"]
      Auth:
        Authorizers:
          # ClinicERPAuthorizer:
          #   UserPoolArn: !GetAtt ClinicERPPool.Arn
          ValidateFunctionAuthorizer:
            FunctionArn: !GetAtt validationFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Cookie
              ReauthorizeEvery: 0
        DefaultAuthorizer: ValidateFunctionAuthorizer
      # Models:
      #   DoctorModel:
      #     "Fn::Transform":
      #       Name: "AWS::Include"
      #       Parameters:
      #         Location: "./src/schemas/doctorSchema.json"

  lambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-simple-clinic-erp-main"
      AutoPublishAlias: !Ref Stage
      Handler: handler.handler
      CodeUri: ./
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
        - S3CrudPolicy:
            BucketName: !Ref MyBucket
      Environment:
        Variables:
          tableName: !Ref SampleTable
          bucketName: !Ref MyBucket
          stage: !Ref Stage
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /{proxy+}
            Method: ANY
            # RequestModel:
            #   Model: DoctorModel
            #   Required: true
            #   ValidateBody: true

  loginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: ./authFunctions/login/
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          cognitoAppClientId: !Ref ClinicERPPoolClient
          redirectUri: "/login"
          tokenUri: !Sub "https://${CognitoDomain}-${Stage}-${AWS::AccountId}.auth.eu-west-1.amazoncognito.com/oauth2/token"
          appUri: "/api/doctors"
          # stage: !Ref Stage ?????
      Events:
        ApiLogin:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /login
            Method: GET
            Auth:
              Authorizer: NONE

  validationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: ./authFunctions/validate/
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          userPoolId: !Ref ClinicERPPool
          cognitoAppClientId: !Ref ClinicERPPoolClient
          # # stage: !Ref Stage ?????

  MyBucket:
    Type: AWS::S3::Bucket

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Stage}-simple-clinic-erp"
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1-SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      GlobalSecondaryIndexes:
        - IndexName: "GSI3"
          KeySchema:
            - AttributeName: "SK"
              KeyType: "HASH"
            - AttributeName: "GSI1-SK"
              KeyType: "RANGE"
          ProvisionedThroughput:
            ReadCapacityUnits: "2"
            WriteCapacityUnits: "2"
          Projection:
            ProjectionType: ALL

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Globals:
  Function:
    Tracing: Active
    Tags:
      project: simple-clinic-erp
      environment: !Ref Stage
  Api:
    OpenApiVersion: 3.0.1 # to avoid default stage creation
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
Outputs:
  ApiEndpoint:
    Description: "API endpoint"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  UserPoolId:
    Description: "User Pool Id"
    Value: !Ref ClinicERPPool
  UserPoolClientId:
    Description: "User Pool Client Id"
    Value: !Ref ClinicERPPoolClient
  SimpleClinicERPTable:
    Description: "DynamoDB table where we will be storing books"
    Value: !Ref SampleTable
